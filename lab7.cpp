#include <iostream> // подключаем библиотеку ввод - вывод
#include <iomanip> // подключаем библиотеку модификаторов

using namespace std;

int main() {
  int matrix_row; // количество строк матрицы
  int matrix_column; // количество столбцов матрицы
  int non_zero_rows = 0; // количество строк, не содержащих нулевые элементы
  int max_num = 0; // максимальный элемент, повторяющийся более одного раза

  setlocale(LC_ALL, "Russian"); // устанавливаем русский язык

  cout << "Введите количество строк: "; // вводим количество строк матрицы
  cin >> matrix_row;

  cout << "Введите количество столбцов: "; // вводим количество столбцов матрицы
  cin >> matrix_column;

  int **matrix = new int *[matrix_row]; // выделяем память под матрицу
  for (int i = 0; i < matrix_row; i++) {
    matrix[i] = new int[matrix_column];
  }

  cout << "Введите элементы матрицы: \n" << endl; // вводим элементы матрицы
  for (int i = 0; i < matrix_row; i++) { // проходимся циклом по строкам и столбцам
    for (int j = 0; j < matrix_column; j++) {
      cout << "matrix[" << i + 1 << "][" << j + 1 << "]: "; // выводим какой элемент матрицы
      cin >> matrix[i][j]; // вводим элемент матрицы
    }
  }
  cout << endl;

  // выводим матрицу
  for (int i = 0; i < matrix_row; i++) { // проходимся циклом по строкам и столбцам
    for (int j = 0; j < matrix_column; j++) {
      cout << setw(3) << matrix[i][j]; // выводим элемент матрицы
    }
    cout << "\n" << endl;
  }

  // подсчитываем количество строк, не содержащих нулевые элементы
  for (int i = 0; i < matrix_row; i++) { // проходимся циклом по строкам и столбцам
    bool has_zero = false; // флаг, показывающий, содержит ли строка нулевые элементы

    for (int j = 0; j < matrix_column; j++) {
      if (matrix[i][j] == 0) { // если элемент матрицы равен нулю
        has_zero = true; // устанавливаем флаг
        break; // прерываем цикл
      }
    }

    if (!has_zero) { // если нет нулевых элементов в строке
      non_zero_rows++; // увеличиваем количество строк, не содержащих нулевые элементы
    }
  }

  // находим максимальный элемент, повторяющийся более одного раза
  for (int i = 0; i < matrix_row; i++) { // проходимся циклом по строкам и столбцам
    for (int j = 0; j < matrix_column; j++) {
      if (matrix[i][j] > max_num) { // если элемент матрицы больше максимального
        for (int k = 0; k < matrix_column; k++) { // проходимся циклом по столбцам
          if (j == k) continue; // пропускаем текущий столбец

          if (matrix[i][j] == matrix[i][k]) { // если элементы равны
            max_num = matrix[i][j]; // устанавливаем максимальный элемент
            break; // прерываем цикл
          }
        }
      }
    }
  }

  // выводим полученые значения
  cout << "Количество строк, не содержащих нулевые элементы: " << non_zero_rows << endl;
  cout << "Максимальный элемент, повторяющийся более одного раза: " << max_num << endl;

  return 0;
}
